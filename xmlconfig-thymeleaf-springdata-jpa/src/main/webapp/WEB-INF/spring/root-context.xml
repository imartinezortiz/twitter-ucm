<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:data="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<!-- Enables Spring's context configuration using annotations  -->
	<context:annotation-config />

	<context:component-scan base-package="es.ucm.fdi.twitter.business" />
	<context:component-scan base-package="es.ucm.fdi.users.business" />

	<!-- -->
	<!-- Database access configuration -->
	<!-- -->

	<context:property-placeholder location="classpath:db.properties, classpath:security.properties" />

	<!-- DataSource + DB Connection pool -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP" />
<!-- 		<property name="connectionTestQuery" value="SELECT 1" /> -->
		<property name="dataSourceClassName">
			<value>${jdbc.dataSourceClassName}</value>
		</property>
		<property name="dataSourceProperties">
			<props>
				<prop key="url">${jdbc.url}</prop>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
			</props>
		</property>
	</bean>

	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- Hibernate + EntityManagerFactory configuration -->

	<bean id="jpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<array>
				<value>es.ucm.fdi.twitter.business.entity</value>
				<value>es.ucm.fdi.users.business.entity</value>
			</array>
		</property>
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">10</prop>
				<prop key="hibernate.hbm2ddl.import_files">${hibernate.hbm2ddl.import_files}</prop>
			</props>
		</property>
	</bean>

	<!-- Enables the use of @Transactional and configures Spring to create class 
		based proxies instead of JDK Proxy, that only supports the creation of interface 
		proxies -->
	<tx:annotation-driven transaction-manager="transactionManager"
		mode="proxy" proxy-target-class="true" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
		p:entityManagerFactory-ref="entityManagerFactory" />


	<!-- -->
	<!-- Spring Data JPA -->
	<!-- -->
	<data:repositories base-package="es.ucm.fdi.twitter.spring.data.jpa"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />


	<data:repositories base-package="es.ucm.fdi.users.spring.data.jpa"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />
</beans>